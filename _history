{"entries":[{"timestamp":1732988922625,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"20\" y=\"20\""],[0,"></b"]],"start1":67,"start2":67,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"//% color=#126180 icon=\"\\uf0fb\" block=\"ThisExtensionIsATest\"\nnamespace ESP8266_IoT {\n\n    /* enumeration */\n    enum Cmd {\n        None, //0\n        ConnectWifi, //1\n    }\n\n    let wifi_connected: boolean = false\n    let telloIP = \"192.168.10.1\"\n    let recvString = \"\"\n    let commandPort = 8889\n    let scanWIFIAPFlag = 0\n    let currentCmd: Cmd = Cmd.None\n\n    const EspEventSource = 3000\n    const EspEventValue = {\n        None: Cmd.None,\n        ConnectWifi: Cmd.ConnectWifi\n    }\n\n    // Function to read and display response on the micro:bit\n    function readResponse(): void {\n        let response = serial.readString();\n        if (response.includes(\"OK\")) {\n            basic.showString(\"Connected\");\n        } else {\n            basic.showString(\"Failed\");\n            basic.showString(response); // Display the actual error\n        }\n    }\n\n    // Write AT command with CR+LF ending\n    function sendAT(command: string, wait: number = 0) {\n        serial.writeString(`${command}\\u000D\\u000A`)\n        basic.pause(wait)\n    }\n\n    function restEsp8266() {\n        sendAT(\"AT+RESTORE\", 1000) // restore to factory settings\n        sendAT(\"AT+RST\", 1000) // rest\n        serial.readString()\n        sendAT(\"AT+CWMODE=1\", 500) // set to STA mode\n        sendAT(\"AT+SYSTIMESTAMP=1634953609130\", 100) // Set local timestamp.\n        sendAT(`AT+CIPSNTPCFG=1,8,\"ntp1.aliyun.com\",\"0.pool.ntp.org\",\"time.google.com\"`, 100)\n        basic.pause(3000)\n    }\n\n    function sendCommandToTello(command: string): void {\n        // Assuming you're already connected to Tello WiFi, have set up UDP connection and initialisd the Tello into SDK mode\n        sendAT(`AT+CIPSEND=${command.length}`, 500);  // Send command length and command\n        serial.writeString(command + \"\\r\\n\"); // Send the actual command\n        basic.pause(500);\n        readResponse(); // Display Tello's response\n    }\n\n\n    function scanWIFIAP(ssid: string) {\n\n        let scanflag = 0\n        let mscnt = 0\n        let recvString = \" \"\n        sendAT(`AT+CWLAPOPT=1,2,-100,255`)\n        sendAT(`AT+CWLAP`)\n        while (!(scanflag)) {\n\n            recvString = recvString + serial.readString()\n            basic.pause(1)\n            mscnt += 1\n            if (mscnt >= 3000) {\n                scanWIFIAPFlag = 0\n                break\n            }\n\n            if (recvString.includes(\"+CWLAP:(\")) {\n\n                mscnt = 0\n                recvString = recvString.slice(recvString.indexOf(\"+CWLAP:(\"))\n                scanflag = 1\n                while (1) {\n\n                    recvString += serial.readString()\n                    basic.pause(1)\n                    mscnt += 1\n\n                    // OLED.clear()\n                    // OLED.writeStringNewLine(_recvString)\n                    if (recvString.includes(\"OK\") || mscnt >= 3000) {\n\n                        if (mscnt >= 3000) {\n                            scanWIFIAPFlag = 0\n                        } else if (recvString.includes(ssid)) {\n                            scanWIFIAPFlag = 1\n                        } else {\n                            scanWIFIAPFlag = 0\n                        }\n                        break\n                    }\n                }\n            }\n\n        }\n        recvString = \" \"\n    }\n\n    \n\n    /* Initialize ESP8266 module */\n    //% block=\"Set ESP8266|RX %tx|TX %rx|Baud rate %baudrate\"\n    //% tx.defl=SerialPin.P8\n    //% rx.defl=SerialPin.P12\n    //% ssid.defl=your_ssid\n    //% pw.defl=your_password weight=100\n    export function initWIFI(tx: SerialPin, rx: SerialPin, baudrate: BaudRate) {\n        serial.redirect(tx, rx, BaudRate.BaudRate115200)\n        basic.pause(100)\n        serial.setTxBufferSize(128)\n        serial.setRxBufferSize(128)\n        restEsp8266()\n    }\n\n    /* Connect to Wii router */\n    //% block=\"Connect Wifi SSID = %ssid|KEY = %pw\"\n    //% ssid.defl=your_ssid\n    //% pw.defl=your_pwd weight=95\n    export function connectWifi(ssid: string, pw: string) {\n\n        while (1) {\n            scanWIFIAP(ssid)\n            if (scanWIFIAPFlag) {\n                currentCmd = Cmd.ConnectWifi\n                sendAT(`AT+CWJAP=\"${ssid}\",\"${pw}\"`) // connect to Wifi router\n                control.waitForEvent(EspEventSource, EspEventValue.ConnectWifi)\n                while (!wifi_connected) {\n                    restEsp8266()\n                    sendAT(`AT+CWJAP=\"${ssid}\",\"${pw}\"`)\n                    control.waitForEvent(EspEventSource, EspEventValue.ConnectWifi)\n                }\n                break\n            } else {\n                restEsp8266()\n                currentCmd = Cmd.ConnectWifi\n                sendAT(`AT+CWJAP=\"${ssid}\",\"${pw}\"`)\n                control.waitForEvent(EspEventSource, EspEventValue.ConnectWifi)\n                if (wifi_connected) {\n                    break\n                }\n            }\n        }\n    }\n\n    /* Check if ESP8266 successfully connected to Wifi */\n    //% block=\"Wifi connected %State\" weight=70\n    export function wifiState(state: boolean) {\n        return wifi_connected === state\n    }\n    \n    // Seting up UDP connection (2) and initialise the Tello into SDK mode (3)\n    //% block=\"Initialise ESP and Tello connection\"\n    export function setupUDPConnection() {\n        if (!wifi_connected) {\n            basic.showString(\"No WiFi\")\n            return\n        }\n\n        // Setup UDP connection\n        sendAT(`AT+CIPSTART=\"UDP\",\"${telloIP}\",${commandPort}`, 2000)\n        if (!readResponse()) return\n\n        // Enter SDK mode\n        sendCommandToTello(\"command\")\n    }\n}"],[1,"\n"]],"start1":0,"start2":0,"length1":5539,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":244,"start2":244,"length1":32,"length2":31}]}]},{"timestamp":1732989433902,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n    /* "],[-1,"E"],[1,"e"],[0,"numerati"]],"start1":85,"start2":85,"length1":17,"length2":17},{"diffs":[[0,"ion "],[-1,"for the different possible commands we can use the ESP8266 for"],[0,"*/\n "]],"start1":101,"start2":101,"length1":70,"length2":8},{"diffs":[[0,"None"],[-1," // tracks current code used"],[0,"\n\n  "]],"start1":354,"start2":354,"length1":36,"length2":8},{"diffs":[[0," Display"],[-1,"s"],[0," the act"]],"start1":811,"start2":811,"length1":17,"length2":16},{"diffs":[[0,"ding"],[-1," for esp8266 to read"],[0,"\n   "]],"start1":891,"start2":891,"length1":28,"length2":8},{"diffs":[[0,"ng()"],[-1," // clears any leftover data from the serial input buffer"],[0,"\n   "]],"start1":1196,"start2":1196,"length1":65,"length2":8},{"diffs":[[0,"  }\n"],[1,"\n    function sendCommandToTello(command: string): void {\n    "],[0,"    /"],[-1,"* After"],[1,"/ Assuming you're already"],[0," con"]],"start1":1454,"start2":1454,"length1":20,"length2":100},{"diffs":[[0,"mode"],[-1," */\n    function sendCommandToTello(command: string): void {"],[0,"\n   "]],"start1":1637,"start2":1637,"length1":68,"length2":8},{"diffs":[[0,"55`)"],[-1," //1=Shows all APs. 2=Displays signal strength(RSSI). -100,255=Defines signal strength range "],[0,"\n   "]],"start1":2045,"start2":2045,"length1":101,"length2":8},{"diffs":[[0,"AP`)"],[-1," //Initiates a Wi-Fi scan"],[0,"\n   "]],"start1":2072,"start2":2072,"length1":33,"length2":8},{"diffs":[[0," >= "],[-1,"5"],[1,"3"],[0,"000) {"],[-1," //"],[0,"\n   "]],"start1":2237,"start2":2237,"length1":18,"length2":15}]}]},{"timestamp":1732990031091,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"{ //"],[-1,"scans wifi for 5sec"],[0,"\n   "]],"start1":2513,"start2":2513,"length1":27,"length2":8}]}]},{"timestamp":1732990039182,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ize("],[-1,"64"],[1,"128"],[0,")\n  "]],"start1":3969,"start2":3969,"length1":10,"length2":11}]}]},{"timestamp":1732990866838,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ize("],[-1,"256"],[1,"128"],[0,")\n  "]],"start1":4004,"start2":4004,"length1":11,"length2":11}]}]},{"timestamp":1732990868681,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"art\""],[-1," id=\"`;ty!#a-FKXFxfEC`c$f\""],[0," x=\""]],"start1":100,"start2":100,"length1":34,"length2":8},{"diffs":[[0,"ver\""],[-1," id=\"{JfW$8s@ol=7nI^*)zVA\""],[0," x=\""]],"start1":151,"start2":151,"length1":34,"length2":8}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,": string) {\n"],[1,"\n"],[0,"        let "]],"start1":2066,"start2":2066,"length1":24,"length2":25},{"diffs":[[0,"ion init"],[-1,"Esp"],[1,"WIFI"],[0,"(tx: Ser"]],"start1":3795,"start2":3795,"length1":19,"length2":20},{"diffs":[[0,"(64)"],[-1,"  // Adjusted"],[0,"\n   "]],"start1":3972,"start2":3972,"length1":21,"length2":8},{"diffs":[[0,"256)"],[-1," // Adjusted"],[0,"\n   "]],"start1":4008,"start2":4008,"length1":20,"length2":8},{"diffs":[[0,"o Wi"],[-1,"f"],[0,"i "],[-1,"(1)"],[1,"router"],[0," */\n"]],"start1":4058,"start2":4058,"length1":14,"length2":16}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":239,"start2":239,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1732988922624,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"ESP8266TelloEduDrone\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1732990866838,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"//% color=#126180 icon=\"\\uf0fb\" block=\"ThisExtensionIsATest\"\nnamespace ESP8266_IoT {\n\n    /* Enumeration for the different possible commands we can use the ESP8266 for*/\n    enum Cmd {\n        None, //0\n        ConnectWifi, //1\n    }\n\n    let wifi_connected: boolean = false\n    let telloIP = \"192.168.10.1\"\n    let recvString = \"\"\n    let commandPort = 8889\n    let scanWIFIAPFlag = 0\n    let currentCmd: Cmd = Cmd.None // tracks current code used\n\n    const EspEventSource = 3000\n    const EspEventValue = {\n        None: Cmd.None,\n        ConnectWifi: Cmd.ConnectWifi\n    }\n\n    // Function to read and display response on the micro:bit\n    function readResponse(): void {\n        let response = serial.readString();\n        if (response.includes(\"OK\")) {\n            basic.showString(\"Connected\");\n        } else {\n            basic.showString(\"Failed\");\n            basic.showString(response); // Displays the actual error\n        }\n    }\n\n    // Write AT command with CR+LF ending for esp8266 to read\n    function sendAT(command: string, wait: number = 0) {\n        serial.writeString(`${command}\\u000D\\u000A`)\n        basic.pause(wait)\n    }\n\n    function restEsp8266() {\n        sendAT(\"AT+RESTORE\", 1000) // restore to factory settings\n        sendAT(\"AT+RST\", 1000) // rest\n        serial.readString() // clears any leftover data from the serial input buffer\n        sendAT(\"AT+CWMODE=1\", 500) // set to STA mode\n        sendAT(\"AT+SYSTIMESTAMP=1634953609130\", 100) // Set local timestamp.\n        sendAT(`AT+CIPSNTPCFG=1,8,\"ntp1.aliyun.com\",\"0.pool.ntp.org\",\"time.google.com\"`, 100)\n        basic.pause(3000)\n    }\n    /* After connected to Tello WiFi, have set up UDP connection and initialisd the Tello into SDK mode */\n    function sendCommandToTello(command: string): void {\n        sendAT(`AT+CIPSEND=${command.length}`, 500);  // Send command length and command\n        serial.writeString(command + \"\\r\\n\"); // Send the actual command\n        basic.pause(500);\n        readResponse(); // Display Tello's response\n    }\n\n\n    function scanWIFIAP(ssid: string) {\n\n        let scanflag = 0\n        let mscnt = 0\n        let recvString = \" \"\n        sendAT(`AT+CWLAPOPT=1,2,-100,255`) //1=Shows all APs. 2=Displays signal strength(RSSI). -100,255=Defines signal strength range \n        sendAT(`AT+CWLAP`) //Initiates a Wi-Fi scan\n        while (!(scanflag)) {\n\n            recvString = recvString + serial.readString()\n            basic.pause(1)\n            mscnt += 1\n            if (mscnt >= 5000) { //scans wifi for 5sec\n                scanWIFIAPFlag = 0\n                break\n            }\n\n            if (recvString.includes(\"+CWLAP:(\")) {\n\n                mscnt = 0\n                recvString = recvString.slice(recvString.indexOf(\"+CWLAP:(\"))\n                scanflag = 1\n                while (1) {\n\n                    recvString += serial.readString()\n                    basic.pause(1)\n                    mscnt += 1\n\n                    // OLED.clear()\n                    // OLED.writeStringNewLine(_recvString)\n                    if (recvString.includes(\"OK\") || mscnt >= 3000) {\n\n                        if (mscnt >= 3000) {\n                            scanWIFIAPFlag = 0\n                        } else if (recvString.includes(ssid)) {\n                            scanWIFIAPFlag = 1\n                        } else {\n                            scanWIFIAPFlag = 0\n                        }\n                        break\n                    }\n                }\n            }\n\n        }\n        recvString = \" \"\n    }\n\n    \n\n    /* Initialize ESP8266 module */\n    //% block=\"Set ESP8266|RX %tx|TX %rx|Baud rate %baudrate\"\n    //% tx.defl=SerialPin.P8\n    //% rx.defl=SerialPin.P12\n    //% ssid.defl=your_ssid\n    //% pw.defl=your_password weight=100\n    export function initWIFI(tx: SerialPin, rx: SerialPin, baudrate: BaudRate) {\n        serial.redirect(tx, rx, BaudRate.BaudRate115200)\n        basic.pause(100)\n        serial.setTxBufferSize(128)\n        serial.setRxBufferSize(128)\n        restEsp8266()\n    }\n\n    /* Connect to Wii router */\n    //% block=\"Connect Wifi SSID = %ssid|KEY = %pw\"\n    //% ssid.defl=your_ssid\n    //% pw.defl=your_pwd weight=95\n    export function connectWifi(ssid: string, pw: string) {\n\n        while (1) {\n            scanWIFIAP(ssid)\n            if (scanWIFIAPFlag) {\n                currentCmd = Cmd.ConnectWifi\n                sendAT(`AT+CWJAP=\"${ssid}\",\"${pw}\"`) // connect to Wifi router\n                control.waitForEvent(EspEventSource, EspEventValue.ConnectWifi)\n                while (!wifi_connected) {\n                    restEsp8266()\n                    sendAT(`AT+CWJAP=\"${ssid}\",\"${pw}\"`)\n                    control.waitForEvent(EspEventSource, EspEventValue.ConnectWifi)\n                }\n                break\n            } else {\n                restEsp8266()\n                currentCmd = Cmd.ConnectWifi\n                sendAT(`AT+CWJAP=\"${ssid}\",\"${pw}\"`)\n                control.waitForEvent(EspEventSource, EspEventValue.ConnectWifi)\n                if (wifi_connected) {\n                    break\n                }\n            }\n        }\n    }\n\n    /* Check if ESP8266 successfully connected to Wifi */\n    //% block=\"Wifi connected %State\" weight=70\n    export function wifiState(state: boolean) {\n        return wifi_connected === state\n    }\n    \n    // Seting up UDP connection (2) and initialise the Tello into SDK mode (3)\n    //% block=\"Initialise ESP and Tello connection\"\n    export function setupUDPConnection() {\n        if (!wifi_connected) {\n            basic.showString(\"No WiFi\")\n            return\n        }\n\n        // Setup UDP connection\n        sendAT(`AT+CIPSTART=\"UDP\",\"${telloIP}\",${commandPort}`, 2000)\n        if (!readResponse()) return\n\n        // Enter SDK mode\n        sendCommandToTello(\"command\")\n    }\n}","README.md":"","pxt.json":"{\n    \"name\": \"ESP8266TelloEduDrone\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1732991059535}